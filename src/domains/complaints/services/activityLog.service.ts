import { ActivityLog, CreateActivityLogRequest, ActivityLogFilters, ActivityAction } from "@/common/types";

// Mock activity log data
const mockActivityLogs: ActivityLog[] = [
  {
    id: "act-001",
    complaintId: "C2024001",
    action: "created",
    performedBy: "user123",
    performedAt: "2024-05-31T10:30:00Z",
    description: "‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÄ‡∏£‡∏∑‡πà‡∏≠‡∏á‡∏£‡πâ‡∏≠‡∏á‡πÄ‡∏£‡∏µ‡∏¢‡∏ô‡πÉ‡∏´‡∏°‡πà",
    details: {
      notes: "‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡πÅ‡∏à‡πâ‡∏á‡∏õ‡∏±‡∏ç‡∏´‡∏≤‡πÑ‡∏ü‡∏ñ‡∏ô‡∏ô‡∏î‡∏±‡∏ö‡πÉ‡∏ô‡∏ã‡∏≠‡∏¢ 15"
    }
  },
  {
    id: "act-002",
    complaintId: "C2024001",
    action: "status_changed",
    performedBy: "admin001",
    performedAt: "2024-05-31T11:15:00Z",
    description: "‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏à‡∏≤‡∏Å '‡πÉ‡∏´‡∏°‡πà' ‡πÄ‡∏õ‡πá‡∏ô '‡∏£‡∏≠‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö'",
    details: {
      oldValue: "‡πÉ‡∏´‡∏°‡πà",
      newValue: "‡∏£‡∏≠‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö",
      reason: "‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏î‡∏≥‡πÄ‡∏ô‡∏¥‡∏ô‡∏Å‡∏≤‡∏£‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö"
    }
  },
  {
    id: "act-003",
    complaintId: "C2024001",
    action: "assigned",
    performedBy: "admin001",
    performedAt: "2024-05-31T14:20:00Z",
    description: "‡∏°‡∏≠‡∏ö‡∏´‡∏°‡∏≤‡∏¢‡πÉ‡∏´‡πâ‡∏ó‡∏µ‡∏°‡πÑ‡∏ü‡∏ü‡πâ‡∏≤‡∏™‡∏≤‡∏ò‡∏≤‡∏£‡∏ì‡∏∞",
    details: {
      newValue: "‡∏ó‡∏µ‡∏°‡πÑ‡∏ü‡∏ü‡πâ‡∏≤‡∏™‡∏≤‡∏ò‡∏≤‡∏£‡∏ì‡∏∞",
      estimatedCompletion: "2024-06-03"
    }
  },
  {
    id: "act-004",
    complaintId: "C2024001",
    action: "note_added",
    performedBy: "tech001",
    performedAt: "2024-06-01T09:30:00Z",
    description: "‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Å‡∏≤‡∏£‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö",
    details: {
      notes: "‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡πÅ‡∏•‡πâ‡∏ß‡∏û‡∏ö‡∏ß‡πà‡∏≤‡πÄ‡∏õ‡πá‡∏ô‡∏õ‡∏±‡∏ç‡∏´‡∏≤‡πÑ‡∏ü‡∏î‡∏±‡∏ö‡∏à‡∏≤‡∏Å‡∏´‡∏°‡πâ‡∏≠‡πÅ‡∏õ‡∏•‡∏á‡πÑ‡∏ü‡∏ü‡πâ‡∏≤ ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏î‡∏≥‡πÄ‡∏ô‡∏¥‡∏ô‡∏Å‡∏≤‡∏£‡∏ã‡πà‡∏≠‡∏°‡πÅ‡∏ã‡∏°"
    }
  },
  {
    id: "act-005",
    complaintId: "C2024001",
    action: "status_changed",
    performedBy: "tech001",
    performedAt: "2024-06-01T16:45:00Z",
    description: "‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡πÄ‡∏õ‡πá‡∏ô '‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏î‡∏≥‡πÄ‡∏ô‡∏¥‡∏ô‡∏Å‡∏≤‡∏£'",
    details: {
      oldValue: "‡∏£‡∏≠‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö",
      newValue: "‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏î‡∏≥‡πÄ‡∏ô‡∏¥‡∏ô‡∏Å‡∏≤‡∏£",
      reason: "‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏î‡∏≥‡πÄ‡∏ô‡∏¥‡∏ô‡∏Å‡∏≤‡∏£‡∏ã‡πà‡∏≠‡∏°‡πÅ‡∏ã‡∏°"
    }
  },
  {
    id: "act-006",
    complaintId: "C2024002",
    action: "created",
    performedBy: "user456",
    performedAt: "2024-05-30T08:15:00Z",
    description: "‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÄ‡∏£‡∏∑‡πà‡∏≠‡∏á‡∏£‡πâ‡∏≠‡∏á‡πÄ‡∏£‡∏µ‡∏¢‡∏ô‡πÉ‡∏´‡∏°‡πà",
    details: {
      notes: "‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡πÅ‡∏à‡πâ‡∏á‡∏õ‡∏±‡∏ç‡∏´‡∏≤‡∏´‡∏•‡∏∏‡∏°‡∏ö‡πà‡∏≠‡∏ö‡∏ô‡∏ñ‡∏ô‡∏ô‡∏™‡∏≤‡∏¢‡∏´‡∏•‡∏±‡∏Å"
    }
  },
  {
    id: "act-007",
    complaintId: "C2024002",
    action: "priority_changed",
    performedBy: "admin001",
    performedAt: "2024-05-30T09:00:00Z",
    description: "‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏≥‡∏Ñ‡∏±‡∏ç‡πÄ‡∏õ‡πá‡∏ô '‡∏î‡πà‡∏ß‡∏ô'",
    details: {
      oldValue: "‡∏õ‡∏Å‡∏ï‡∏¥",
      newValue: "‡∏î‡πà‡∏ß‡∏ô",
      reason: "‡πÄ‡∏õ‡πá‡∏ô‡∏õ‡∏±‡∏ç‡∏´‡∏≤‡∏Ñ‡∏ß‡∏≤‡∏°‡∏õ‡∏•‡∏≠‡∏î‡∏†‡∏±‡∏¢"
    }
  },
  {
    id: "act-008",
    complaintId: "C2024002",
    action: "assigned",
    performedBy: "admin001",
    performedAt: "2024-05-30T09:30:00Z",
    description: "‡∏°‡∏≠‡∏ö‡∏´‡∏°‡∏≤‡∏¢‡πÉ‡∏´‡πâ‡∏ó‡∏µ‡∏°‡∏ã‡πà‡∏≠‡∏°‡πÅ‡∏ã‡∏°‡∏ñ‡∏ô‡∏ô",
    details: {
      newValue: "‡∏ó‡∏µ‡∏°‡∏ã‡πà‡∏≠‡∏°‡πÅ‡∏ã‡∏°‡∏ñ‡∏ô‡∏ô",
      estimatedCompletion: "2024-06-02"
    }
  },
  {
    id: "act-009",
    complaintId: "C2024002",
    action: "status_changed",
    performedBy: "road001",
    performedAt: "2024-06-01T10:00:00Z",
    description: "‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡πÄ‡∏õ‡πá‡∏ô '‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏î‡∏≥‡πÄ‡∏ô‡∏¥‡∏ô‡∏Å‡∏≤‡∏£'",
    details: {
      oldValue: "‡∏£‡∏≠‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö",
      newValue: "‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏î‡∏≥‡πÄ‡∏ô‡∏¥‡∏ô‡∏Å‡∏≤‡∏£",
      reason: "‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏î‡∏≥‡πÄ‡∏ô‡∏¥‡∏ô‡∏Å‡∏≤‡∏£‡∏ã‡πà‡∏≠‡∏°‡πÅ‡∏ã‡∏°"
    }
  },
  {
    id: "act-010",
    complaintId: "C2024002",
    action: "completed",
    performedBy: "road001",
    performedAt: "2024-06-02T15:30:00Z",
    description: "‡πÄ‡∏™‡∏£‡πá‡∏à‡∏™‡∏¥‡πâ‡∏ô‡∏Å‡∏≤‡∏£‡∏î‡∏≥‡πÄ‡∏ô‡∏¥‡∏ô‡∏Å‡∏≤‡∏£",
    details: {
      notes: "‡∏ã‡πà‡∏≠‡∏°‡πÅ‡∏ã‡∏°‡∏´‡∏•‡∏∏‡∏°‡∏ö‡πà‡∏≠‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢‡πÅ‡∏•‡πâ‡∏ß ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Ñ‡∏∏‡∏ì‡∏†‡∏≤‡∏û‡∏á‡∏≤‡∏ô‡∏ú‡πà‡∏≤‡∏ô"
    }
  }
];

export class ActivityLogService {
  // Get activity logs for a specific complaint
  static async getActivityLogs(complaintId: string): Promise<ActivityLog[]> {
    await new Promise(resolve => setTimeout(resolve, 500));
    
    return mockActivityLogs
      .filter(log => log.complaintId === complaintId)
      .sort((a, b) => new Date(b.performedAt).getTime() - new Date(a.performedAt).getTime());
  }

  // Create new activity log
  static async createActivityLog(request: CreateActivityLogRequest): Promise<ActivityLog> {
    await new Promise(resolve => setTimeout(resolve, 800));
    
    const newLog: ActivityLog = {
      id: `act-${Date.now()}-${Math.random().toString(36).substr(2, 9)}`,
      complaintId: request.complaintId,
      action: request.action,
      performedBy: request.performedBy,
      performedAt: new Date().toISOString(),
      description: request.description,
      details: request.details,
      attachments: request.attachments
    };
    
    mockActivityLogs.push(newLog);
    return newLog;
  }

  // Get activity logs with filters
  static async getActivityLogsWithFilters(filters: ActivityLogFilters): Promise<ActivityLog[]> {
    await new Promise(resolve => setTimeout(resolve, 600));
    
    let filteredLogs = [...mockActivityLogs];
    
    if (filters.action) {
      filteredLogs = filteredLogs.filter(log => log.action === filters.action);
    }
    
    if (filters.performedBy) {
      filteredLogs = filteredLogs.filter(log => log.performedBy === filters.performedBy);
    }
    
    if (filters.dateFrom) {
      filteredLogs = filteredLogs.filter(log => 
        new Date(log.performedAt) >= new Date(filters.dateFrom!)
      );
    }
    
    if (filters.dateTo) {
      filteredLogs = filteredLogs.filter(log => 
        new Date(log.performedAt) <= new Date(filters.dateTo!)
      );
    }
    
    return filteredLogs.sort((a, b) => 
      new Date(b.performedAt).getTime() - new Date(a.performedAt).getTime()
    );
  }

  // Get recent activity logs
  static async getRecentActivityLogs(limit: number = 10): Promise<ActivityLog[]> {
    await new Promise(resolve => setTimeout(resolve, 400));
    
    return mockActivityLogs
      .sort((a, b) => new Date(b.performedAt).getTime() - new Date(a.performedAt).getTime())
      .slice(0, limit);
  }

  // Get activity statistics
  static async getActivityStats(): Promise<{
    totalActions: number;
    actionsByType: Record<ActivityAction, number>;
    recentActivity: number;
    mostActiveUser: string;
  }> {
    await new Promise(resolve => setTimeout(resolve, 300));
    
    const totalActions = mockActivityLogs.length;
    const actionsByType = mockActivityLogs.reduce((acc, log) => {
      acc[log.action] = (acc[log.action] || 0) + 1;
      return acc;
    }, {} as Record<ActivityAction, number>);
    
    const recentActivity = mockActivityLogs.filter(log => {
      const logDate = new Date(log.performedAt);
      const weekAgo = new Date();
      weekAgo.setDate(weekAgo.getDate() - 7);
      return logDate >= weekAgo;
    }).length;
    
    const userActivity = mockActivityLogs.reduce((acc, log) => {
      acc[log.performedBy] = (acc[log.performedBy] || 0) + 1;
      return acc;
    }, {} as Record<string, number>);
    
    const mostActiveUser = Object.entries(userActivity)
      .sort(([,a], [,b]) => b - a)[0]?.[0] || "‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•";
    
    return {
      totalActions,
      actionsByType,
      recentActivity,
      mostActiveUser
    };
  }

  // Helper method to get action display name
  static getActionDisplayName(action: ActivityAction): string {
    const actionNames: Record<ActivityAction, string> = {
      created: "‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÄ‡∏£‡∏∑‡πà‡∏≠‡∏á",
      status_changed: "‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞",
      assigned: "‡∏°‡∏≠‡∏ö‡∏´‡∏°‡∏≤‡∏¢‡∏á‡∏≤‡∏ô",
      priority_changed: "‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏≥‡∏Ñ‡∏±‡∏ç",
      note_added: "‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å",
      image_added: "‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏£‡∏π‡∏õ‡∏†‡∏≤‡∏û",
      location_updated: "‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á",
      completed: "‡πÄ‡∏™‡∏£‡πá‡∏à‡∏™‡∏¥‡πâ‡∏ô",
      reopened: "‡πÄ‡∏õ‡∏¥‡∏î‡πÉ‡∏´‡∏°‡πà"
    };
    
    return actionNames[action] || action;
  }

  // Helper method to get action icon
  static getActionIcon(action: ActivityAction): string {
    const actionIcons: Record<ActivityAction, string> = {
      created: "üìù",
      status_changed: "üîÑ",
      assigned: "üë§",
      priority_changed: "‚ö†Ô∏è",
      note_added: "üìù",
      image_added: "üì∑",
      location_updated: "üìç",
      completed: "‚úÖ",
      reopened: "üîÑ"
    };
    
    return actionIcons[action] || "üìã";
  }
}
